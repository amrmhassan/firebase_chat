// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'color_theme.dart';

// **************************************************************************
// CopyWithGenerator
// **************************************************************************

abstract class _$ColorThemeCWProxy {
  ColorTheme backGround(Color backGround);

  ColorTheme cardBackground(Color cardBackground);

  ColorTheme lightCardBackground(Color lightCardBackground);

  ColorTheme kInactiveColor(Color kInactiveColor);

  ColorTheme kBlueColor(Color kBlueColor);

  ColorTheme textFieldBackgroundColor(Color textFieldBackgroundColor);

  ColorTheme kMainIconColor(Color kMainIconColor);

  ColorTheme kDangerColor(Color kDangerColor);

  ColorTheme kGreenColor(Color kGreenColor);

  ColorTheme activeText(Color activeText);

  ColorTheme inActiveText(Color inActiveText);

  /// This function **does support** nullification of nullable fields. All `null` values passed to `non-nullable` fields will be ignored. You can also use `ColorTheme(...).copyWith.fieldName(...)` to override fields one at a time with nullification support.
  ///
  /// Usage
  /// ```dart
  /// ColorTheme(...).copyWith(id: 12, name: "My name")
  /// ````
  ColorTheme call({
    Color? backGround,
    Color? cardBackground,
    Color? lightCardBackground,
    Color? kInactiveColor,
    Color? kBlueColor,
    Color? textFieldBackgroundColor,
    Color? kMainIconColor,
    Color? kDangerColor,
    Color? kGreenColor,
    Color? activeText,
    Color? inActiveText,
  });
}

/// Proxy class for `copyWith` functionality. This is a callable class and can be used as follows: `instanceOfColorTheme.copyWith(...)`. Additionally contains functions for specific fields e.g. `instanceOfColorTheme.copyWith.fieldName(...)`
class _$ColorThemeCWProxyImpl implements _$ColorThemeCWProxy {
  const _$ColorThemeCWProxyImpl(this._value);

  final ColorTheme _value;

  @override
  ColorTheme backGround(Color backGround) => this(backGround: backGround);

  @override
  ColorTheme cardBackground(Color cardBackground) =>
      this(cardBackground: cardBackground);

  @override
  ColorTheme lightCardBackground(Color lightCardBackground) =>
      this(lightCardBackground: lightCardBackground);

  @override
  ColorTheme kInactiveColor(Color kInactiveColor) =>
      this(kInactiveColor: kInactiveColor);

  @override
  ColorTheme kBlueColor(Color kBlueColor) => this(kBlueColor: kBlueColor);

  @override
  ColorTheme textFieldBackgroundColor(Color textFieldBackgroundColor) =>
      this(textFieldBackgroundColor: textFieldBackgroundColor);

  @override
  ColorTheme kMainIconColor(Color kMainIconColor) =>
      this(kMainIconColor: kMainIconColor);

  @override
  ColorTheme kDangerColor(Color kDangerColor) =>
      this(kDangerColor: kDangerColor);

  @override
  ColorTheme kGreenColor(Color kGreenColor) => this(kGreenColor: kGreenColor);

  @override
  ColorTheme activeText(Color activeText) => this(activeText: activeText);

  @override
  ColorTheme inActiveText(Color inActiveText) =>
      this(inActiveText: inActiveText);

  @override

  /// This function **does support** nullification of nullable fields. All `null` values passed to `non-nullable` fields will be ignored. You can also use `ColorTheme(...).copyWith.fieldName(...)` to override fields one at a time with nullification support.
  ///
  /// Usage
  /// ```dart
  /// ColorTheme(...).copyWith(id: 12, name: "My name")
  /// ````
  ColorTheme call({
    Object? backGround = const $CopyWithPlaceholder(),
    Object? cardBackground = const $CopyWithPlaceholder(),
    Object? lightCardBackground = const $CopyWithPlaceholder(),
    Object? kInactiveColor = const $CopyWithPlaceholder(),
    Object? kBlueColor = const $CopyWithPlaceholder(),
    Object? textFieldBackgroundColor = const $CopyWithPlaceholder(),
    Object? kMainIconColor = const $CopyWithPlaceholder(),
    Object? kDangerColor = const $CopyWithPlaceholder(),
    Object? kGreenColor = const $CopyWithPlaceholder(),
    Object? activeText = const $CopyWithPlaceholder(),
    Object? inActiveText = const $CopyWithPlaceholder(),
  }) {
    return ColorTheme(
      backGround:
          backGround == const $CopyWithPlaceholder() || backGround == null
              ? _value.backGround
              // ignore: cast_nullable_to_non_nullable
              : backGround as Color,
      cardBackground: cardBackground == const $CopyWithPlaceholder() ||
              cardBackground == null
          ? _value.cardBackground
          // ignore: cast_nullable_to_non_nullable
          : cardBackground as Color,
      lightCardBackground:
          lightCardBackground == const $CopyWithPlaceholder() ||
                  lightCardBackground == null
              ? _value.lightCardBackground
              // ignore: cast_nullable_to_non_nullable
              : lightCardBackground as Color,
      kInactiveColor: kInactiveColor == const $CopyWithPlaceholder() ||
              kInactiveColor == null
          ? _value.kInactiveColor
          // ignore: cast_nullable_to_non_nullable
          : kInactiveColor as Color,
      kBlueColor:
          kBlueColor == const $CopyWithPlaceholder() || kBlueColor == null
              ? _value.kBlueColor
              // ignore: cast_nullable_to_non_nullable
              : kBlueColor as Color,
      textFieldBackgroundColor:
          textFieldBackgroundColor == const $CopyWithPlaceholder() ||
                  textFieldBackgroundColor == null
              ? _value.textFieldBackgroundColor
              // ignore: cast_nullable_to_non_nullable
              : textFieldBackgroundColor as Color,
      kMainIconColor: kMainIconColor == const $CopyWithPlaceholder() ||
              kMainIconColor == null
          ? _value.kMainIconColor
          // ignore: cast_nullable_to_non_nullable
          : kMainIconColor as Color,
      kDangerColor:
          kDangerColor == const $CopyWithPlaceholder() || kDangerColor == null
              ? _value.kDangerColor
              // ignore: cast_nullable_to_non_nullable
              : kDangerColor as Color,
      kGreenColor:
          kGreenColor == const $CopyWithPlaceholder() || kGreenColor == null
              ? _value.kGreenColor
              // ignore: cast_nullable_to_non_nullable
              : kGreenColor as Color,
      activeText:
          activeText == const $CopyWithPlaceholder() || activeText == null
              ? _value.activeText
              // ignore: cast_nullable_to_non_nullable
              : activeText as Color,
      inActiveText:
          inActiveText == const $CopyWithPlaceholder() || inActiveText == null
              ? _value.inActiveText
              // ignore: cast_nullable_to_non_nullable
              : inActiveText as Color,
    );
  }
}

extension $ColorThemeCopyWith on ColorTheme {
  /// Returns a callable class that can be used as follows: `instanceOfColorTheme.copyWith(...)` or like so:`instanceOfColorTheme.copyWith.fieldName(...)`.
  // ignore: library_private_types_in_public_api
  _$ColorThemeCWProxy get copyWith => _$ColorThemeCWProxyImpl(this);
}
